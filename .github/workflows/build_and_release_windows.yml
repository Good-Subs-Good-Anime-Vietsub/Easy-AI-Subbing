# Tên của workflow, hiển thị trong tab "Actions" trên GitHub
name: Build and Release for Windows

# Kích hoạt workflow khi có một sự kiện cụ thể
on:
  # Chạy workflow khi có commit được push và commit đó có gắn một tag
  # Tag này phải khớp với pattern 'v*' (ví dụ: v1.0.0, v2.5, v1.0.0-beta)
  push:
    tags:
      - 'v*'

# Các job sẽ được chạy trong workflow này
jobs:
  # Job để build ứng dụng trên Windows
  build_windows:
    # Tên hiển thị của job
    name: Build on Windows
    # Môi trường chạy job này - runner của GitHub Actions trên Windows mới nhất
    runs-on: windows-latest

    # Các bước (steps) thực hiện trong job build_windows
    steps:
    # Bước 1: Lấy mã nguồn từ repository
    - name: Checkout code
      uses: actions/checkout@v4
      # Tùy chọn: Lấy lịch sử commit đầy đủ nếu cần generate_release_notes dựa trên nhiều commit
      # with:
      #   fetch-depth: 0 # Bỏ comment nếu cần

    # Bước 2: Cài đặt môi trường Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        # Chọn phiên bản Python. Đặt một phiên bản cụ thể (như 3.12) tốt hơn '3.x' trong CI.
        python-version: '3.12' # Bạn có thể thay đổi phiên bản này nếu cần
        # Tùy chọn: Bật caching cho pip để tăng tốc độ cài đặt thư viện
        cache: pip # Bỏ comment nếu muốn dùng cache

    # Bước 3: Cài đặt các thư viện phụ thuộc
    # Đảm bảo 'pyinstaller' có trong file requirements.txt của bạn
    - name: Install dependencies
      run: |
        # Nâng cấp pip lên phiên bản mới nhất
        python -m pip install --upgrade pip
        # Cài đặt tất cả thư viện được liệt kê trong requirements.txt
        # Workflow này dựa vào việc PyInstaller CÓ trong requirements.txt
        # ĐẢM BẢO requirements.txt KHÔNG CÓ ĐƯỜNG DẪN CỤC BỘ HOẶC file://
        pip install -r requirements.txt

    # Bước 4: Chạy PyInstaller với lệnh được chỉ định
    # Lệnh này sẽ tạo ra thư mục output trong thư mục 'dist'
    # Sử dụng PowerShell và đưa toàn bộ lệnh vào một dòng duy nhất trong YAML để tránh lỗi ParserError
    - name: Run PyInstaller command
      shell: pwsh
      run: pyinstaller --clean --workpath "${{ github.workspace }}/build" --distpath "${{ github.workspace }}/dist" --name "Easy AI Subbing" --icon "app_icon.ico" --windowed --onedir --add-data "app_icon.ico;." "main.py"
      # Giải thích các tùy chọn:
      # --clean: Xóa các thư mục build/dist/spec tạm thời trước khi build. Giúp tránh lỗi do file cũ.
      # --workpath "${{ github.workspace }}/build": Chỉ định rõ ràng thư mục làm việc tạm thời trong thư mục gốc của repo.
      # --distpath "${{ github.workspace }}/dist": Chỉ định rõ ràng thư mục output cuối cùng trong thư mục gốc của repo.
      # --name "Easy AI Subbing": Tên của thư mục output (trong dist/) và tên file thực thi chính bên trong (Easy AI Subbing.exe). Dùng dấu ngoặc kép vì có khoảng trắng.
      # --icon "app_icon.ico": File icon cho ứng dụng. Đảm bảo đường dẫn tương đối đúng từ thư mục gốc repo. Dùng dấu ngoặc kép.
      # --windowed: Ứng dụng GUI (không mở cửa sổ console). Nếu là ứng dụng dòng lệnh (CLI), HÃY BỎ "--windowed".
      # --onedir: Build thành một thư mục chứa file .exe và các file phụ thuộc.
      # --add-data "app_icon.ico;.": Thêm file icon vào thư mục gốc của gói onedir. Đảm bảo đường dẫn tương đối đúng. Dùng dấu ngoặc kép.
      # "main.py": File script Python chính. Đảm bảo đường dẫn tương đối đúng từ thư mục gốc repo. Dùng dấu ngoặc kép.
      # Lưu ý: Sử dụng "${{ github.workspace }}/..." đảm bảo đường dẫn tuyệt đối chính xác trên runner.

    # Bước 5: Đổi tên thư mục output đã build để dễ nhận dạng (tùy chọn nhưng tốt)
    # PyInstaller đặt output trong thư mục 'dist'. Tên thư mục là "Easy AI Subbing".
    # Chúng ta đổi tên thành "Easy AI Subbing-windows"
    - name: Rename output directory for clarity
      shell: pwsh # Sử dụng PowerShell
      run: |
        # Đường dẫn nguồn là thư mục output của PyInstaller, relative to GITHUB_WORKSPACE
        $sourceDir = "${{ github.workspace }}/dist/Easy AI Subbing"
        # Đường dẫn đích là tên thư mục sau khi đổi tên
        $destDir = "${{ github.workspace }}/dist/Easy AI Subbing-windows"
        Write-Host "Attempting to rename '$sourceDir' to '$destDir'"
        # Sử dụng Move-Item của PowerShell để đổi tên/di chuyển. Kiểm tra sự tồn tại trước khi di chuyển.
        if (Test-Path $sourceDir) {
            Move-Item -Path $sourceDir -Destination $destDir -Force
        } else {
            Write-Host "Source directory '$sourceDir' not found. Skipping rename."
            # Có thể muốn dừng workflow nếu thư mục output không được tạo ra
            # exit 1
        }

    # Bước 6: Nén thư mục output thành file .zip có kèm phiên bản
    - name: Create zip archive
      shell: pwsh # Sử dụng PowerShell
      run: |
        # Tên file zip sẽ là "Easy AI Subbing-<phiên bản>-windows.zip"
        # ${{ github.ref_name }} là tên tag (ví dụ: v1.0.0)
        $zipFileName = "Easy AI Subbing-${{ github.ref_name }}-windows.zip"
        # Đường dẫn đầy đủ đến file zip sẽ nằm trong thư mục dist/ (relative to GITHUB_WORKSPACE)
        $zipFilePath = "${{ github.workspace }}/dist/$zipFileName"
        # Đường dẫn đến thư mục cần nén (sau khi đổi tên ở bước 5)
        $sourceDirectory = "${{ github.workspace }}/dist/Easy AI Subbing-windows"

        Write-Host "Attempting to zip directory: $sourceDirectory to file: $zipFilePath"

        # Nén thư mục. Kiểm tra sự tồn tại của thư mục nguồn trước khi nén.
        if (Test-Path $sourceDirectory) {
            Compress-Archive -Path $sourceDirectory -DestinationPath $zipFilePath -Force # -CompressionLevel Fastest (Tùy chọn nén nhanh hơn)
            Write-Host "Zip archive created successfully."
        } else {
            Write-Host "Source directory '$sourceDirectory' not found. Skipping zip creation."
            # Có thể muốn dừng workflow nếu thư mục nguồn không tồn tại
            # exit 1
        }


    # Bước 7: Upload file .zip đã tạo lên làm artifact của workflow
    # Artifact là file tạm thời lưu trữ kết quả giữa các job hoặc để tải về sau
    # Sử dụng if: success() để chỉ upload nếu các bước trước thành công
    - name: Upload build artifact (zip file)
      uses: actions/upload-artifact@v4
      with:
        # Tên của artifact (để job release tải về)
        name: windows-build-zip
        # Đường dẫn đến file .zip cần upload (relative to GITHUB_WORKSPACE)
        path: ${{ github.workspace }}/dist/Easy AI Subbing-${{ github.ref_name }}-windows.zip
      # Thêm điều kiện chỉ chạy bước này nếu file zip tồn tại
      # if: success() && steps.create_zip_archive.outcome == 'success' && steps.create_zip_archive.outputs.zip_file_path # <-- Đây là cách tốt nhất nếu bước 6 có output path
      # Vì Compress-Archive không có output path trực tiếp, chúng ta kiểm tra sự tồn tại của file zip sau khi nén
      # Cần thêm một bước kiểm tra sự tồn tại file zip trước khi upload hoặc dựa vào output của bước 6.
      # Cách đơn giản nhất là kiểm tra sự tồn tại file ngay trong step upload, nhưng upload-artifact không có tùy chọn đó.
      # Chúng ta sẽ dựa vào bước Create zip archive có báo lỗi nếu không tạo được file.
      # Thêm kiểm tra file sau khi nén và lưu đường dẫn vào biến môi trường/output là cách robust nhất, nhưng phức tạp hơn.
      # Tạm thời, dựa vào Compress-Archive báo lỗi nếu nguồn không tồn tại và kiểm tra sự tồn tại file sau đó (hoặc dựa vào bước Debug)

  # Job để tạo GitHub Release và đính kèm file .zip
  release:
    # Tên hiển thị của job
    name: Create Release
    # Job này PHẢI chờ job 'build_windows' hoàn thành thành công
    needs: build_windows # Đảm bảo build xong mới tạo release
    # Job này không cần chạy trên Windows, chạy trên Ubuntu là đủ và thường nhanh hơn
    runs-on: ubuntu-latest

    # Cấp quyền cho GITHUB_TOKEN. Cần quyền 'write' để tạo release và upload assets.
    permissions:
      contents: write
      # Thêm quyền releases: write (thường bao gồm trong contents:write, nhưng thêm vào cho rõ ràng)
      releases: write

    # Các bước (steps) thực hiện trong job release
    steps:
    # Bước 1: Tải về artifact (file .zip) đã được upload từ job build_windows
    # Tải artifact vào thư mục gốc của workspace trong job release (trên Ubuntu runner)
    # Theo hành vi v4, file zip sẽ được tải vào artifacts/windows-build-zip/
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-build-zip # Tên artifact đã upload ở job build
        path: artifacts       # Tải vào thư mục 'artifacts'

    # Bước 2: Debug - Liệt kê nội dung của thư mục artifact đã tải về
    # Bước này giúp kiểm tra xem file zip đã được tải về thành công và nằm ở đâu
    - name: Debug: List downloaded artifact contents
      run: |
        echo "Current directory: $(pwd)"
        echo "Contents of artifacts/:"
        ls -lha artifacts/
        echo "Contents of artifacts/windows-build-zip/:"
        # Kiểm tra xem có thư mục 'windows-build-zip' được tạo ra không (v4 nên làm vậy)
        if [ -d "artifacts/windows-build-zip" ]; then
          ls -lha artifacts/windows-build-zip/
          echo "Looking for zip file using find:"
          # Sử dụng find để tìm file zip và in đường dẫn đầy đủ
          find artifacts/windows-build-zip/ -name "*.zip" -print || echo "No zip file found with *.zip pattern"
        else
          echo "Directory 'artifacts/windows-build-zip' not found."
        fi

    # Bước 3: Tạo GitHub Release và Đính kèm file .zip
    # Thay đổi cách chỉ định files
    - name: Create GitHub Release and Upload Asset
      # Sử dụng action có sẵn để tạo release
      uses: softprops/action-gh-release@v1
      with:
        # Tên tag được sử dụng làm tên release (ví dụ: v1.0.0)
        tag_name: ${{ github.ref_name }}
        # Tiêu đề của release (ví dụ: Release v1.0.0)
        name: Release ${{ github.ref_name }}
        # Tùy chọn: Tự động tạo ghi chú release dựa trên các commit từ tag trước đến tag hiện tại
        generate_release_notes: true
        # Chỉ định file .zip cần đính kèm vào release.
        # Dựa trên hành vi của download-artifact v4, file zip nên nằm trong thư mục windows-build-zip/
        # Sử dụng pattern wildcard. Đường dẫn tương đối từ thư mục gốc của job release.
        files: artifacts/windows-build-zip/*.zip # <-- Giữ pattern này
      env:
        # Token mặc định mà GitHub Actions cung cấp để cho phép tương tác với API của GitHub
        # Quyền của token này được cấu hình trong khối 'permissions' của job
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}